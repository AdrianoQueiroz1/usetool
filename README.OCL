-*- Text -*-
$Date: Sun, 18 Mar 2001 19:41:39 +0100 $
$ReleaseVersion: 2.3.1 $

This file documents issues related to the implementation of OCL in
USE.

* OCL semantics:

  - Note that some OCL operations are non-deterministic, e.g.,
    Set(T)->asSequence. The result of these operations are
    implementation dependent. The equation s1->asSequence =
    s1->asSequence will therefore be wrong in general.


* OCL extensions/variations:
  - Invariants can be marked as "existential", e. g.,
    context Person existential inv bossExists:
        self.isBoss = true
    When no instance of a person is created or no boss exists this 
    invariant will evaluate to false (instead of "normal" invariants,
    where ist will evaluate to true, if no person is instanciated.

  - Invariants can have multiple variables, e. g.,
    context p1, p2:Person inv nameUnique
        p1.name = p2.name implies p1 = p2

  - All types include an undefined value. For example, the expression
    1/0 results in the value "undefined" of type Integer. Checking for
    an undefined value can be done with the new operations "isDefined"
    and "isUndefined". These are defined for all types, e.g.,
    (1/0).isUndefined() results in "true". An undefined value may be
    explicitly specified with the new operation "oclUndefined(T)"
    where T may be any type.
