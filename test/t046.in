? oclUndefined(String)
*-> Undefined : OclVoid
? oclUndefined(Set(String))
*-> Undefined : OclVoid
?Set{}
*-> Set{} : Set(OclVoid)
?Set{}->including(1)
*-> Set{1} : Set(Integer)
?Set{}->including(1)->including('a')
*-> Set{'a',1} : Set(OclAny)
?let s:Set(String) = Set{} in s->including(1)
*-> Set{1} : Set(Integer)
?let s:Set(OclAny) = Set{} in s->including(1)->including('a')
*-> Set{'a',1} : Set(OclAny)
?let sAny:Set(OclAny) = Set{1} in let sString:Set(String)=Set{'a'} in sAny->union(sString)
*-> Set{'a',1} : Set(OclAny)
?let sAny:Set(OclAny) = Set{1} in let sString:Set(String)=Set{'a'} in sString->union(sAny)
*-> Set{'a',1} : Set(OclAny)
!create b1,b2:B
!create c1,c2:C
exit
