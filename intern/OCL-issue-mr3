Subject: Argument of oclAsType too permissive

Description:

Currently, the type parameter of oclAsType allows any type.  It should
be restricted to super- and subtypes of the object's type. All other
cases are statically (by just looking at the syntax) known to
fail. For example, the same situation holds for type casts in Java:

class A {}
class B extends A {}
class C {}

class Test {
    void foo() {
	A a = null;
	B b = (B) a;
	C c = (C) a;
    }
}

javac Test.java
Test.java:9: Invalid cast from A to C.
	C c = (C) a;
	      ^
1 error

The relevant quote from the Java Language Specification is Sect. 5.5:
S is the source type, T is the target type.

  "If T is a class type, then S and T must be related classes-that is,
   S and T must be the same class, or S a subclass of T, or T a
   subclass of S; otherwise a compile-time error occurs."

The proposed change will help OCL tools catching errors which
otherwise might go unnoticed.

Proposed change:

Add text similar to the quote above.



